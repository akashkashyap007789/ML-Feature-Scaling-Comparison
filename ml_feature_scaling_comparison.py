# -*- coding: utf-8 -*-
"""ML-Feature-Scaling-Comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKhm5tgOXSRb4-FVDrneDeLCkyRo9f_F
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



df = pd.read_csv("/content/Social_Network_Ads.csv")



df = df.iloc[:, 2:]



df.sample(5)



from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df.drop("Purchased", axis=1), df["Purchased"], test_size=0.2, random_state=0)

X_train.shape, X_test.shape



from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(X_train)

xtrain_scaled = scaler.transform(X_train)
xtest_scaled = scaler.transform(X_test)



scaler.mean_



xtrain_scaled = pd.DataFrame(xtrain_scaled, columns=X_train.columns)
xtest_scaled = pd.DataFrame(xtest_scaled, columns=X_train.columns)

np.round(xtrain_scaled.describe(), 1)



fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))

ax1.scatter(X_train["Age"], X_train["EstimatedSalary"])
ax1.set_title("Before Scaling")
ax2.scatter(xtrain_scaled["Age"], xtrain_scaled["EstimatedSalary"], color="red")
ax1.set_title("After Scaling")
plt.show()



fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))

ax1.set_title("Before Scaling")
sns.kdeplot(X_train["Age"], ax=ax1)
sns.kdeplot(X_train["EstimatedSalary"], ax=ax1)

ax2.set_title("After Scaling")
sns.kdeplot(xtrain_scaled["Age"], ax=ax2)
sns.kdeplot(xtrain_scaled["EstimatedSalary"], ax=ax2)
plt.show()



fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))

# before scaling
ax1.set_title('Age Distribution Before Scaling')
sns.kdeplot(X_train['Age'], ax=ax1)

# after scaling
ax2.set_title('Age Distribution After Standard Scaling')
sns.kdeplot(xtrain_scaled['Age'], ax=ax2)
plt.show()



fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))

# before scaling
ax1.set_title('Salary Distribution Before Scaling')
sns.kdeplot(X_train['EstimatedSalary'], ax=ax1)

# after scaling
ax2.set_title('Salary Distribution Standard Scaling')
sns.kdeplot(xtrain_scaled['EstimatedSalary'], ax=ax2)
plt.show()



from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr_scaled = LogisticRegression()
lr.fit(X_train,y_train)
lr_scaled.fit(xtrain_scaled,y_train)



y_pred = lr.predict(X_test)
y_pred_scaled = lr_scaled.predict(xtest_scaled)
from sklearn.metrics import accuracy_score
print("Actual",accuracy_score(y_test,y_pred))
print("Scaled",accuracy_score(y_test,y_pred_scaled))



from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt_scaled = DecisionTreeClassifier()
dt.fit(X_train,y_train)
dt_scaled.fit(xtrain_scaled,y_train)



y_pred = dt.predict(X_test)
y_pred_scaled = dt_scaled.predict(xtest_scaled)
print("Actual",accuracy_score(y_test,y_pred))
print("Scaled",accuracy_score(y_test,y_pred_scaled))



df.describe()



















































